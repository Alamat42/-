#include <stdio.h> 
#include <math.h>
//This calculator wrote with comrad from t.me/ruworm 
double chtod(char c);             //take char and return double
double add();                     //1 lvl, addition, subtraction and brackets closing
double mul();                     //2 lvl, multiplication and division
double mathf();                   //3 lvl, math functon calculating: power, sin, cos, log and other
double lex();                     //4 lvl, math functon parsing
double var();                     //5 lvl, math constants (pi, e) and variable processing
double brc();                     //6 lvl, brackets processing
double number();                  //7 lvl, char to number processing
#define MAX 2000                  //maximum string size
#define POW 1
#define SIN 2
#define COS 3
#define TAN 4
#define CTG 5
#define LOG 6
#define LN  7
#define EXP 8
#define SQRT 9
int lexeme;                       //type of math functon
char str[MAX];                    //input array
int ind=0;                        //index
char variable;                    //variable symbol
double value;                     //variable value
int main()
{
    printf("Введите однобуквенную переменную: \n");
    scanf("%1c%*c", &variable);
    printf("Введите значение переменной: \n");
    scanf("%s", str);
    value=add();
    ind=0;
    printf("Введите выражение: \n");
    scanf("%s", str);
    printf("=%g\n", add());
}
double add()
{
    double num=mul();
    while(str[ind]=='+'||str[ind]=='-')
    {
        if(str[ind]=='+')
        {
            ind++;
            num=num+mul();
        }
        if(str[ind]=='-')
        {
            ind++;
            num=num-mul();
        }
    }
    if(str[ind]==')')
    {
        ++ind;
        return num;
    }
    return num;
}

double mul()
{
    double num=mathf();
    while(str[ind]=='*'||str[ind]=='/')
    {
        if(str[ind]=='*')
        {
            ++ind;
            num=num*mathf();
        }
        if(str[ind]=='/')
        {
            ++ind;
            num=num/mathf();
        }
    }
    return num;
}

double mathf()
{
    double num=lex();
    while(lexeme!=0)
    {
        if(lexeme==POW)
        {
            lexeme=0;
            num=pow(num,lex());
        }
        else if(lexeme==SIN)
        {
            lexeme=0;
            num=sin(lex());
        }
        else if(lexeme==COS)
        {
            lexeme=0;
            num=cos(lex());
        }
        else if(lexeme==TAN)
        {
            lexeme=0;
            num=tan(lex());
        }
        else if(lexeme==CTG)
        {
            lexeme=0;
            num=1/tan(lex());
        }
        else if(lexeme==EXP)
        {
            lexeme=0;
            num=exp(lex());
        }
        else if(lexeme==LN)
        {
            ind=ind+2;
            num=log(lex());
        }
        else if(lexeme==LOG)
        {
            lexeme=0;
            num=log10(lex());
        }
        else if(lexeme==SQRT)
        {
            lexeme=0;
            num=sqrt(lex());
        } 
    }
    return num;
}

double lex()
{
    double num=var();
    while(str[ind]=='^'||str[ind]=='s'||str[ind]=='c'||str[ind]=='t'||str[ind]=='l'||str[ind]=='e'||str[ind]=='a')
    {
        if(str[ind]=='^')
        {
            ++ind;
            lexeme=POW;
        }
        else if(str[ind]=='s'&&str[ind+1]=='i'&&str[ind+2]=='n')
        {
            ind=ind+3;
            lexeme=SIN;
        }
        else if(str[ind]=='c'&&str[ind+1]=='o'&&str[ind+2]=='s')
        {
            ind=ind+3;
            lexeme=COS;
        }
        else if(str[ind]=='t'&&str[ind+1]=='g')
        {
            ind=ind+2;
            lexeme=TAN;
        }
        else if(str[ind]=='c'&&str[ind+1]=='t'&&str[ind+2]=='g')
        {
            ind=ind+3;
            lexeme=CTG;
        }
        else if(str[ind]=='e'&&str[ind+1]=='x'&&str[ind+2]=='p')
        {
            ind=ind+3;
            lexeme=EXP;
        }
        else if(str[ind]=='l'&&str[ind+1]=='n')
        {
            ind=ind+2;
            lexeme=LN;
        }
        else if(str[ind]=='l'&&str[ind+1]=='g')
        {
            ind=ind+2;
            lexeme=LOG;
        }
        else if(str[ind]=='s'&&str[ind+1]=='q'&&str[ind+2]=='r'&&str[ind+3]=='t')
        {
            ind=ind+4;
            lexeme=SQRT;
        } 
    }
    return num;
}

double var()
{
    double num=brc();
    if(str[ind]=='p'&&str[ind+1]=='i')
    {
        ind=ind+2;
        num=M_PI;
    }
    else if(str[ind]=='e'&&str[ind+1]!='x')
    {
        ++ind;
        num=M_E;
    }
    else if(str[ind]==variable)
    {
        ++ind;
        num=value;
    }
}

double brc()
{
    double num=number();
    if(str[ind]=='(')
    {
        ++ind;
        return add();
    }
    return num;
}

double number()
{
    int point=1;
    double num=0;
    while ((str[ind]>='0'&&str[ind]<='9')||str[ind]=='.'||str[ind]==',')
    {
        if(str[ind]>='0'&&str[ind]<='9')
        {
            if(point==1)
            {
                num=(num*10+chtod(str[ind]));
            }
            else if(point>1)
            {
                num=num+chtod(str[ind])/point;
                point=point*10;
            }
        }
        else
        {
            point=point*10;
        }
        ++ind;
    } 
    return num;
}

double chtod(char c)
{
    if(c<'0'||c>'9')
    {
        return 0;
    }
    else
    {
    double p=c-'0';
    return p;
    }
}
